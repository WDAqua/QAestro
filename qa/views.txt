Agdistis(x,y,z):- disambiguation(x,y,z,t),entity(x),question(y),disambiguatedentitities(z)
Alchemy(y,z):- disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
StanfordNED(y,z):- disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
DBpediaspotlightNED(x,y,z):- disambiguation(x,y,z,t),entity(x),question(y),disambiguatedentitities(z)
OKAgdistis(t,z):- disambiguation(x,y,z,t),template(t),disambiguatedentitities(z)
AIDA(y,z):-disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
alexentity(y,z):-disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
quakisentity(y,z):-disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
fox(y,z):-disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
tagme(y,z):-disambiguation(x,y,z,t),question(y),disambiguatedentitities(z)
Stanford NER(y,x):- recognition(y,x),question(y),entity(x)
DBpediaNER(y,x):- recognition(y,x),question(y),entity(x)
casiaNER(y,x):- recognition(y,x),question(y),entity(x)
selfwiringtokenizator(y,t1):- tokenisation(y,t1),question(y),token(t1)
AskTokenmerger(t1):- tokenisation(y,t1),token(t1)
selfpostagger(t1,p):- postagging(y,t1,p),postag(p),token(t1) 
ApacheNLP(y,p,t1):- tokenisation(y,t1),postagging(y,t1,p),token(t1),postag(p),question(y)
Clear NLP(y,p,t1):- tokenisation(y,t1),postagging(y,t1,p),token(t1),postag(p),question(y)
TBSLpostagger(y,p,t1):- tokenisation(y,t1),postagging(y,t1,p),token(t1),question(y),postag(p)
TreeTagger(y,p,t1):- tokenisation(y,t1),postagging(y,t1,p),token(t1),question(y),postag(p)
SENNA(y,p,t1):- tokenisation(y,t1),postagging(y,t1,p),token(t1),question(y),postag(p)
Casiaparser(y,x,g) :- dependency(y,x,t1,p),question(y),entities(x),dependencygraph(g)
Chaosparser(y,g):- dependency(y,x,t1,p),question(y),dependencygraph(g)
Isoftparser(y,g):- dependency(y,x,t1,p),question(y),dependencygraph(g)
semparser(y,g):- dependency(y,x,t1,p),question(y),dependencygraph(g)
qparser(y,g):- dependency(y,x,t1,p),question(y),dependencygraph(g)
freyaparser(y,s) :- parsing(y,t1,p,s),question(y),syntacticgraph(s)
tbslparser(t1,p,s) :- parsing(y,t1,p,s),question(y),tokens(t1),postag(p),syntacticgraph(s)
ftriplegenerator(o,t3):- triple(ty,g,s,o,t3,t2),triplepatterns(t3),ontologyconcepts(o)
powerlinguistic(y,t2):- triple(ty,g,s,o,t3,t2),linguistictripleform(t2),question(y)
aqualinguistic(y,t2):- triple(ty,g,s,o,t3,t2),linguistictripleform(t2),question(y)
Casiapattern(g,t3):- triple(ty,g,s,o,t3,t2),triplepatterns(t3),dependencygraph(g)
tbslpattern(s,t3):- triple(ty,g,s,o,t3,t2),triplepatterns(t3),syntacticgraph(s)
Ontologylookup(y,o):- mapping(y,x,p,g,p2,t2,t1,o,t3,m,t4,m1,n),queston(y),ontologyconcept(o)
consolidator(p2,o):- mapping(y,x,p,g,p2,t2,t1,o,t3,m,t4,m1,n),ontologyconcept(o),potentialontologyconcepts(p2)
powermap(t2,m):- mapping(y,x,p,g,p2,t2,t1,o,t3,m,t4,m1,n),linguistictripleform(t2),mappingtable(m)
Aquamapper(t2,m):- mapping(y,x,p,g,p2,t2,t1,o,t3,m,t4,m1,n),linguistictripleform(t2),mappingtable(m)
HMMmodelling(p2,o):- mapping(y,x,p,g,p2,t2,t1,o,t3,m,t4,m1,n),potentialontologyconcepts(p2),ontologyconcepts(o)
freyaquerygenerator(t3,q):- query(a,q1,t3,t4,g,g1,s),triplepattern(t3),sparql(q)
qakisquerygenerator(t3,q):- query(a,q1,t3,t4,g,g1,s),triplepattern(t3),sparql(q) 
casiaqgenerator(t4,q1,q):- query(a,q1,t3,t4,g,g1,s),ontologytriples(t4),questiontype(q1),sparql(q)
rtvqurygenerator(o,a,q):- query(a,q1,t3,t4,g,g1,s),ontologyconcepts(o),sparql(q),answertype(a)
hawkquerygenerator(g,q):- query(a,q1,t3,t4,g,g1,s),sparql(q),dependencygraph(g)
qanswerquerygenerator(g1,q):- query(a,q1,t3,t4,g,g1,s),sparql(q),querygraph(g1)
xserquerygenerator(g,q):- query(a,q1,t3,t4,g,g1,s),sparql(q),dependencygraph(g)
tbslquerygenerator(s,q):-query(a,q1,t3,t4,g,g1,s),sparql(q),syntacticgraph(s)
poweranswer(m,ans):- answer(m,q,ans),mappingtable(m),finalanswer(ans)
aquaanswer(m,ans):- answer(m,q,ans),mappingtable(m),finalanswer(ans)
okbqaanswer(q,ans):- answer(m,q,ans),sparql(q),finalanswer(ans)
